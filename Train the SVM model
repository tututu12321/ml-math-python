import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import mnist
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix

# MNISTデータセットのロード / Load the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.astype('float32') / 255.0  # 正規化 / Normalize the images
x_test = x_test.astype('float32') / 255.0  # 正規化 / Normalize the images

# 画像を1次元にフラット化 / Flatten the images
x_train = x_train.reshape(-1, 28 * 28)
x_test = x_test.reshape(-1, 28 * 28)

# ニューラルネットワークモデルの構築 / Build the neural network model
def build_nn_model():
    model = models.Sequential([
        layers.Dense(128, activation='relu', input_shape=(28 * 28,)),
        layers.Dense(64, activation='relu'),
        layers.Dense(10, activation='softmax')  # 出力層 / Output layer for 10 classes
    ])
    return model

# モデルのインスタンス化 / Instantiate the model
nn_model = build_nn_model()

# モデルのコンパイル / Compile the model
nn_model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# ニューラルネットワークのトレーニング / Train the neural network
nn_model.fit(x_train, y_train, epochs=10, batch_size=128, validation_split=0.2)

# ニューラルネットワークからの特徴を取得 / Extract features from the neural network
features_train = nn_model.predict(x_train)
features_test = nn_model.predict(x_test)

# SVMモデルのインスタンス化 / Instantiate the SVM model
svm_model = SVC(kernel='linear')  # 線形カーネルを使用 / Using a linear kernel

# SVMのトレーニング / Train the SVM model
svm_model.fit(features_train, y_train)

# テストデータに対する予測 / Make predictions on the test data using SVM
y_pred = svm_model.predict(features_test)

# 精度評価 / Evaluate the SVM model
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# 混同行列の可視化 / Visualize the confusion matrix
def plot_confusion_matrix(cm):
    plt.figure(figsize=(10, 7))
    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
    plt.title('Confusion Matrix')
    plt.colorbar()
    tick_marks = np.arange(10)
    plt.xticks(tick_marks, tick_marks)
    plt.yticks(tick_marks, tick_marks)
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.show()

# 混同行列をプロット / Plot the confusion matrix
cm = confusion_matrix(y_test, y_pred)
plot_confusion_matrix(cm)

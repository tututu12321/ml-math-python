import numpy as np
import matplotlib.pyplot as plt

# 定義
T = 2 * np.pi  # 矩形波の周期
omega = 2 * np.pi / T  # 基本周波数

# 時間軸の設定
t = np.linspace(0, T, 1000)

# フーリエ級数を用いて矩形波を近似（奇数倍のサイン波の和）
def fourier_square_wave(t, n_terms=10):
    # n_termsはフーリエ級数の項数（奇数倍のサイン波の数）
    sum_wave = np.zeros_like(t)
    for n in range(1, n_terms + 1, 2):  # 奇数項のみ
        sum_wave += (4 / (n * np.pi)) * np.sin(n * omega * t)
    return sum_wave

# フーリエ級数の項数を変更して波形をプロット
n_terms_list = [1, 3, 5, 10]  # フーリエ級数の項数をリストに設定

plt.figure(figsize=(10, 6))

# 各項数に対応する矩形波の近似をプロット
for n_terms in n_terms_list:
    wave = fourier_square_wave(t, n_terms)
    plt.plot(t, wave, label=f'{n_terms} terms')

# 正弦波を使った理論矩形波（正解の矩形波）
plt.plot(t, np.sign(np.sin(omega * t)), color='black', linestyle='--', label='Ideal Square Wave')

# グラフのラベル設定
plt.title('Fourier Series Approximation of a Square Wave')
plt.xlabel('Time')
plt.ylabel('Amplitude')
plt.legend()
plt.grid(True)

# FFTを使って信号の周波数成分を確認
N = len(t)  # サンプル数
fs = N / T  # サンプリング周波数（1秒あたりのサンプル数）

# FFTを計算
f = np.fft.fftfreq(N, d=(t[1] - t[0]))  # 周波数軸
fft_values = np.fft.fft(np.sign(np.sin(omega * t)))  # FFTを適用

# 0以上の周波数成分のみプロット
plt.figure(figsize=(10, 6))
plt.plot(f[:N//2], np.abs(fft_values)[:N//2])  # 絶対値をプロット
plt.title('FFT of the Ideal Square Wave')
plt.xlabel('Frequency (Hz)')
plt.ylabel('Magnitude')
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
from scipy.spatial.transform import Rotation as R

# 1. 回転ベクトルを使用したデータの生成
def generate_rotated_data(num_samples=100):
    # ランダムな3Dポイントを生成
    points = np.random.randn(num_samples, 3)
    
    # ランダムな回転ベクトルを生成（回転軸と回転角）
    rotation_vectors = np.random.randn(num_samples, 3)  # ランダムな回転ベクトル
    rotation_matrices = np.array([R.from_rotvec(rot_vec).as_matrix() for rot_vec in rotation_vectors])
    
    # データを回転させる
    rotated_points = np.array([np.dot(rot_mat, point) for rot_mat, point in zip(rotation_matrices, points)])
    
    return points, rotated_points, rotation_vectors

# サンプルデータを生成
points, rotated_points, rotation_vectors = generate_rotated_data()

# 2. 回転ベクトルを使用した機械学習タスク（回転ベクトルを学習）
scaler = StandardScaler()

# 特徴量（元のデータ）とターゲット（回転ベクトル）
X = scaler.fit_transform(points)
y = rotation_vectors  # 回転ベクトル

# それぞれの回転ベクトルの成分を個別に予測
svr_x = SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
svr_y = SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
svr_z = SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)

# 各回転成分の学習
svr_x.fit(X, y[:, 0])  # X成分
svr_y.fit(X, y[:, 1])  # Y成分
svr_z.fit(X, y[:, 2])  # Z成分

# 3. 新しいデータポイントを使って回転ベクトルを予測
new_point = np.random.randn(1, 3)
new_point_scaled = scaler.transform(new_point)
predicted_rotation_x = svr_x.predict(new_point_scaled)
predicted_rotation_y = svr_y.predict(new_point_scaled)
predicted_rotation_z = svr_z.predict(new_point_scaled)

# 予測された回転ベクトル（正しい形状に修正）
predicted_rotation_vector = np.array([predicted_rotation_x[0], predicted_rotation_y[0], predicted_rotation_z[0]])

# 予測された回転ベクトルを用いて新しい点を回転
rot_matrix_pred = R.from_rotvec(predicted_rotation_vector).as_matrix()
rotated_new_point = np.dot(rot_matrix_pred, new_point.T)

# 4. 結果のプロット
fig = plt.figure(figsize=(12, 6))

# 元の点と回転後の点をプロット
ax1 = fig.add_subplot(121, projection='3d')
ax1.scatter(points[:, 0], points[:, 1], points[:, 2], c='blue', label='Original Points')
ax1.set_title('Original Points')
ax1.set_xlabel('X')
ax1.set_ylabel('Y')
ax1.set_zlabel('Z')

ax2 = fig.add_subplot(122, projection='3d')
ax2.scatter(rotated_points[:, 0], rotated_points[:, 1], rotated_points[:, 2], c='red', label='Rotated Points')
ax2.set_title('Rotated Points')
ax2.set_xlabel('X')
ax2.set_ylabel('Y')
ax2.set_zlabel('Z')

plt.show()

# 予測された回転後の新しい点を表示
print("Predicted Rotation Vector:", predicted_rotation_vector)
print("Rotated New Point:", rotated_new_point)

import numpy as np
import matplotlib.pyplot as plt

# --- ハミング符号のエンコードとデコード ---
def hamming_encode(data_bits):
    """ ハミング(7,4)符号をエンコードする """
    # 4ビットのデータを受け取って、7ビットの符号に変換する
    # パリティビットの位置は1, 2, 4の位置に配置される
    codeword = np.zeros(7, dtype=int)
    # データビットを配置
    codeword[2], codeword[4], codeword[5], codeword[6] = data_bits
    
    # パリティビットの計算
    # パリティ1 (p1): 1, 3, 5, 7ビットに関するパリティ
    codeword[0] = codeword[2] ^ codeword[4] ^ codeword[6]
    
    # パリティ2 (p2): 2, 3, 6, 7ビットに関するパリティ
    codeword[1] = codeword[2] ^ codeword[5] ^ codeword[6]
    
    # パリティ4 (p4): 4, 5, 6, 7ビットに関するパリティ
    codeword[3] = codeword[4] ^ codeword[5] ^ codeword[6]
    
    return codeword

def hamming_decode(codeword):
    """ ハミング(7,4)符号をデコードする """
    # パリティビットの計算
    p1 = codeword[0] ^ codeword[2] ^ codeword[4] ^ codeword[6]
    p2 = codeword[1] ^ codeword[2] ^ codeword[5] ^ codeword[6]
    p4 = codeword[3] ^ codeword[4] ^ codeword[5] ^ codeword[6]
    
    # エラー位置を計算
    error_position = p1 * 1 + p2 * 2 + p4 * 4
    
    if error_position:
        print(f"Error detected at position {error_position}. Correcting the error.")
        codeword[error_position - 1] = 1 - codeword[error_position - 1]  # エラーを訂正
    
    # データビットを抽出
    data_bits = [codeword[2], codeword[4], codeword[5], codeword[6]]
    
    return data_bits


# --- 通信チャネルのエラーシミュレーション ---
def simulate_channel(data_bits, error_prob):
    """ 通信チャネルでエラーをシミュレートする """
    # データの一部を誤り訂正で変更（error_probの確率でビットを反転）
    corrupted_bits = data_bits.copy()
    for i in range(len(data_bits)):
        if np.random.rand() < error_prob:
            corrupted_bits[i] = 1 - corrupted_bits[i]  # ビット反転（エラー）
    
    return corrupted_bits


# --- シャノンの定理 ---
def shannon_capacity(B, S, N):
    """ シャノンの定理に基づいてチャネル容量を計算 """
    return B * np.log2(1 + S / N)

# 使用例

# ハミング符号を使ってデータをエンコード
data_bits = [1, 0, 1, 0]  # 4ビットのデータ
encoded_bits = hamming_encode(data_bits)
print("Encoded Data:", encoded_bits)

# 通信チャネルでエラーをシミュレート
error_probability = 0.1  # 10%の確率でエラー
corrupted_data = simulate_channel(encoded_bits, error_probability)
print("Corrupted Data:", corrupted_data)

# 受信したデータをデコードして誤りを訂正
corrected_data = hamming_decode(corrupted_data)
print("Corrected Data:", corrected_data)

# シャノンの定理によるチャネル容量の計算
B = 1000  # 帯域幅 1000 Hz
S = 10    # 信号強度
N = 1     # ノイズ強度
capacity = shannon_capacity(B, S, N)
print(f"Shannon Channel Capacity: {capacity:.2f} bits per second")

import numpy as np
import matplotlib.pyplot as plt

# データセットの作成（単純な線形データ）
# Create a dataset (simple linear data)
np.random.seed(42)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)

# モデルの初期パラメータ
# Initialize model parameters
theta = np.random.randn(2, 1)  # theta0（バイアス項）とtheta1（重み） / theta0 (intercept) and theta1 (weight)

# 学習率と繰り返し数
# Learning rate and number of iterations
learning_rate = 0.01
n_iterations = 1000
m = len(X)

# Xにバイアス項（1）を追加
# Add a bias term (1) to X
X_b = np.c_[np.ones((m, 1)), X]

# 勾配降下法
# Gradient Descent
for iteration in range(n_iterations):
    # 予測値を計算
    # Calculate predictions
    y_pred = X_b.dot(theta)
    
    # 損失関数の勾配（全微分）を計算
    # Calculate the gradient of the loss function (partial derivatives)
    gradients = 2/m * X_b.T.dot(y_pred - y)
    
    # パラメータの更新
    # Update the parameters
    theta -= learning_rate * gradients

# 最終的なパラメータを出力
# Output the final parameters
print(f"Final parameters: theta0 = {theta[0][0]}, theta1 = {theta[1][0]}")

# 結果のプロット
# Plot the results
plt.scatter(X, y, color='blue', label='Data')  # データを青でプロット (Plot data in blue)
plt.plot(X, X_b.dot(theta), color='red', label='Linear Regression')  # 線形回帰を赤でプロット (Plot linear regression in red)
plt.xlabel('X')
plt.ylabel('y')
plt.title('Linear Regression with Gradient Descent')  # タイトル (Title)
plt.legend()
plt.show()

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.losses import SparseCategoricalCrossentropy
from tensorflow.keras.datasets import mnist

# GPUの数を確認 / Check for available GPUs
gpus = tf.config.list_physical_devices('GPU')
print(f"Available GPUs: {gpus}")

# MirroredStrategyの定義 / Define the Mirrored Strategy
strategy = tf.distribute.MirroredStrategy()

# データのロードと前処理 / Load and preprocess the data
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0  # 正規化 / Normalize the images

# モデルの定義 / Define the model within the strategy scope
with strategy.scope():
    model = Sequential([
        Dense(128, activation='relu', input_shape=(28, 28)),
        Dense(64, activation='relu'),
        Dense(10, activation='softmax')
    ])

    # モデルのコンパイル / Compile the model
    model.compile(
        optimizer=Adam(),
        loss=SparseCategoricalCrossentropy(),
        metrics=['accuracy']
    )

# モデルのトレーニング / Train the model
history = model.fit(
    x_train, y_train,
    epochs=10,
    batch_size=256,
    validation_data=(x_test, y_test)
)

# モデルの評価 / Evaluate the model
test_loss, test_accuracy = model.evaluate(x_test, y_test)
print(f"Test Loss: {test_loss}")
print(f"Test Accuracy: {test_accuracy}")

# 学習曲線の可視化 / Plot training accuracy and loss
import matplotlib.pyplot as plt

plt.figure(figsize=(12, 5))

# 訓練と検証の精度をプロット / Plot training and validation accuracy
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Training and Validation Accuracy')
plt.legend()

# 訓練と検証の損失をプロット / Plot training and validation loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training and Validation Loss')
plt.legend()

plt.tight_layout()
plt.show()

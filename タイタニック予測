# 必要なライブラリのインポート
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.preprocessing import LabelEncoder

# ダミーデータの生成
np.random.seed(42)

# 1000件のダミーデータを生成
data = pd.DataFrame({
    'Pclass': np.random.choice([1, 2, 3], size=1000),  # 客室クラス
    'Sex': np.random.choice(['male', 'female'], size=1000),  # 性別
    'Age': np.random.randint(1, 80, size=1000),  # 年齢
    'SibSp': np.random.randint(0, 5, size=1000),  # 同乗した兄妹/配偶者の人数
    'Parch': np.random.randint(0, 5, size=1000),  # 同乗した親/子供の人数
    'Fare': np.random.uniform(5, 500, size=1000),  # 運賃
    'Embarked': np.random.choice(['C', 'Q', 'S'], size=1000),  # 乗船港
    'Survived': np.random.choice([0, 1], size=1000)  # 生存フラグ（0:死亡, 1:生存）
})

# 'Sex'と'Embarked'を数値に変換（ラベルエンコーディング）
le = LabelEncoder()
data['Sex'] = le.fit_transform(data['Sex'])  # 'male' → 1, 'female' → 0
data['Embarked'] = le.fit_transform(data['Embarked'])  # 'C', 'Q', 'S' → 0, 1, 2

# 特徴量とターゲット変数を分ける
X = data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]
y = data['Survived']

# 訓練データとテストデータに分ける
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ランダムフォレスト分類器を使用
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# テストデータで予測
y_pred = rf.predict(X_test)

# 精度の評価
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# プロット: 精度の棒グラフ
plt.figure(figsize=(6, 4))
plt.bar(['Accuracy'], [accuracy], color='blue')
plt.ylim(0, 1)
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.show()

# プロット: 混同行列のヒートマップ
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Not Survived', 'Survived'], yticklabels=['Not Survived', 'Survived'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

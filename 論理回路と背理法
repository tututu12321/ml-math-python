import numpy as np
import matplotlib.pyplot as plt
from sympy import symbols, And, Or, Not, simplify, Equivalent

# ド・モルガンの法則の確認
A, B = symbols('A B')
de_morgan1 = Equivalent(Not(And(A, B)), Or(Not(A), Not(B)))
de_morgan2 = Equivalent(Not(Or(A, B)), And(Not(A), Not(B)))
print(f"ド・モルガンの法則:")
print(f"¬(A ∧ B) ⇔ ¬A ∨ ¬B : {de_morgan1}")
print(f"¬(A ∨ B) ⇔ ¬A ∧ ¬B : {de_morgan2}")

# 必要条件と十分条件の例
p, q = symbols('p q')
print("\n必要条件と十分条件:")
print(f"十分条件: p ⇒ q (もしpならばq) → qがpの結果")
print(f"必要条件: q ⇒ p (もしqならばp) → pがqの前提")

# 背理法の例（√2が無理数である証明）
n, m = symbols('n m', integer=True)
assumption = (n/m)**2 - 2
simplified_assumption = simplify(assumption)
print("\n背理法による√2が無理数の証明:")
print(f"仮定: (n/m)^2 = 2 の矛盾: {simplified_assumption != 0}")

# デジタル回路（AND, OR, NOT）のシミュレーション
def logic_gate_simulation():
    inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    and_output = np.logical_and(inputs[:, 0], inputs[:, 1])
    or_output = np.logical_or(inputs[:, 0], inputs[:, 1])
    not_output = np.logical_not(inputs[:, 0])

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 3, 1)
    plt.bar(['00', '01', '10', '11'], and_output, color='b')
    plt.title('AND Gate')

    plt.subplot(1, 3, 2)
    plt.bar(['00', '01', '10', '11'], or_output, color='r')
    plt.title('OR Gate')

    plt.subplot(1, 3, 3)
    plt.bar(['0', '1'], not_output[:2], color='g')
    plt.title('NOT Gate')

    plt.tight_layout()
    plt.show()

logic_gate_simulation()

# 必要なライブラリのインポート
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import mnist
from PIL import Image
import numpy as np

# 1. MNISTデータセットのロード
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

# 2. データの前処理（画像データを正規化）
train_images = train_images.reshape((60000, 28, 28, 1)).astype('float32') / 255
test_images = test_images.reshape((10000, 28, 28, 1)).astype('float32') / 255

# 3. One-hotエンコーディング
train_labels = tf.keras.utils.to_categorical(train_labels, 10)
test_labels = tf.keras.utils.to_categorical(test_labels, 10)

# 4. モデルの構築
model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))

# 5. 分類用のDense層を追加
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))

# 6. モデルのコンパイル
model.compile(optimizer='adam', 
              loss='categorical_crossentropy', 
              metrics=['accuracy'])

# 7. モデルの訓練
model.fit(train_images, train_labels, epochs=5, batch_size=64, validation_data=(test_images, test_labels))

# 8. 訓練したモデルの保存
model.save('handwritten_digit_model.h5')

# --- ここから画像を読み込んで予測する部分 ---

# 9. モデルの読み込み
model = tf.keras.models.load_model('handwritten_digit_model.h5')

# 10. 手書きの数字画像を読み込み（例: number.pngという画像ファイル）
img = Image.open('number.png').convert('L')  # グレースケールに変換
img = img.resize((28, 28))  # MNISTのデータと同じサイズにリサイズ
img_array = np.array(img).reshape(1, 28, 28, 1).astype('float32') / 255  # 配列に変換し、正規化

# 11. モデルを使って予測
prediction = model.predict(img_array)

# 12. 予測結果の出力
predicted_digit = np.argmax(prediction)
print(f'予測した数字: {predicted_digit}')


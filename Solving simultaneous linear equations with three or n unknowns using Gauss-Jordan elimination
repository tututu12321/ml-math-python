import numpy as np

def gauss_jordan_elimination(A, b):
    """
    Solves the linear equation Ax = b using Gauss-Jordan elimination.
    :param A: Coefficient matrix (2D list or numpy array)
    :param b: Constant terms (1D list or numpy array)
    :return: Solution vector x
    """
    # Augment the matrix A with b to create the augmented matrix
    A = np.array(A, dtype=float)
    b = np.array(b, dtype=float).reshape(-1, 1)
    augmented_matrix = np.hstack([A, b])

    # Get the number of rows
    n = len(b)

    for i in range(n):
        # Make the diagonal element 1
        augmented_matrix[i] = augmented_matrix[i] / augmented_matrix[i][i]

        # Make the elements above and below the pivot 0
        for j in range(n):
            if i != j:
                augmented_matrix[j] = augmented_matrix[j] - augmented_matrix[j][i] * augmented_matrix[i]

    # The last column of the augmented matrix is the solution
    x = augmented_matrix[:, -1]
    return x

# 2.4.1 3元連立1次方程式
# Example for 3x3 system
A_3x3 = [
    [2, -1, 1],
    [1, 1, -1],
    [1, -2, 2]
]
b_3x3 = [3, 3, 7]

# Solve 3x3 system
solution_3x3 = gauss_jordan_elimination(A_3x3, b_3x3)
print("Solution for 3x3 system:", solution_3x3)

# 2.4.2 n元連立1次方程式
# Example for n x n system (4x4 system as an example)
A_nxn = [
    [2, 1, -1, 3],
    [3, 2, 1, -1],
    [1, -1, 2, 1],
    [1, 3, -1, 2]
]
b_nxn = [5, 10, 7, 3]

# Solve n x n system
solution_nxn = gauss_jordan_elimination(A_nxn, b_nxn)
print("Solution for n x n system:", solution_nxn)

# 2.4.3 ガウス・ジョルダン消去法による計算
# This function uses the Gauss-Jordan elimination method for solving linear equations.
# It can be applied to both 3x3 and n x n systems, as demonstrated above.

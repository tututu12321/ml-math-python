import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize, linprog
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix

# §4.1 Algorithm Complexity and Optimization of Processing Time
import time

# Generate a random array for sorting and binary search
n = 10000
arr = np.random.randint(0, 1000, n)

# 1. Sorting: O(n log n)
start_time = time.time()
sorted_arr = sorted(arr)
end_time = time.time()
print(f"Sorting time (O(n log n)): {end_time - start_time:.5f} seconds")

# 2. Binary search: O(log n)
def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1

# Run binary search
sorted_arr = sorted(arr)  # Sorted list
target = 500  # Value to search
start_time = time.time()
binary_search(sorted_arr, target)
end_time = time.time()
print(f"Binary search time (O(log n)): {end_time - start_time:.5f} seconds")

# §4.2 Binary and Hexadecimal Conversion
# Convert decimal to binary and hexadecimal
decimal_number = 255
binary_rep = bin(decimal_number)[2:]  # Remove "0b"
hex_rep = hex(decimal_number)[2:].upper()  # Remove "0x"

print(f"Decimal: {decimal_number}")
print(f"Binary: {binary_rep}")
print(f"Hexadecimal: {hex_rep}")

# §4.3 Cancellation Error in Floating-Point Data
# Simulate cancellation error in floating point calculation
a = 1e16
b = 1
result = a - (a - b)  # Theoretically, it should be close to 1
print(f"Result of subtraction causing cancellation: {result}")

# §4.4 Parity Check to Detect Errors in Communication Data
def parity_check(data):
    # Check if the data has even or odd parity
    parity = sum(data) % 2
    return parity  # 0 for even parity, 1 for odd parity

# Even parity data (no error)
data = [1, 0, 1, 1, 0, 1, 0]  # Even parity bit
print(f"Parity check result (even): {parity_check(data)}")

# Data with an error
data_with_error = [1, 0, 1, 1, 0, 1, 1]  # Error in parity bit
print(f"Parity check result with error: {parity_check(data_with_error)}")

# §4.5 Hamming Code for Error Correction in Communication Data
def hamming_code(data):
    # Length of data
    n = len(data)
    
    # Calculate number of parity bits (2^k - 1 form)
    r = 0
    while (2 ** r) < (n + r + 1):
        r += 1
    
    # Insert parity bits
    code = [None] * (n + r)
    j = 0
    for i in range(1, n + r + 1):
        if i & (i - 1) == 0:  # Parity bit position
            code[i - 1] = 0
        else:
            code[i - 1] = data[j]
            j += 1

    # Calculate parity bits
    for i in range(r):
        parity_position = 2 ** i
        parity_value = 0
        for j in range(1, len(code) + 1):
            if j & parity_position == parity_position:
                parity_value ^= code[j - 1]
        code[parity_position - 1] = parity_value
    
    return code

def hamming_decode(code):
    n = len(code)
    r = 0
    while (2 ** r) <= n:
        r += 1
    error_position = 0
    for i in range(r):
        parity_position = 2 ** i
        parity_value = 0
        for j in range(1, n + 1):
            if j & parity_position == parity_position:
                parity_value ^= code[j - 1]
        if parity_value != 0:
            error_position += parity_position
    
    if error_position:
        print(f"Error detected at position {error_position}")
        code[error_position - 1] ^= 1  # Correcting the error
        print(f"Corrected code: {code}")
    else:
        print("No error detected")
    
    # Decode Hamming code (excluding parity bits)
    decoded_data = []
    for i in range(1, n + 1):
        if i & (i - 1) != 0:  # Exclude parity bits
            decoded_data.append(code[i - 1])
    return decoded_data

# Generate data
data = [1, 0, 1, 1]  # Data
encoded = hamming_code(data)
print(f"Encoded data with parity: {encoded}")

# Add artificial error
encoded[3] = 1 if encoded[3] == 0 else 0
print(f"Data with error: {encoded}")

# Correct error with Hamming code
decoded_data = hamming_decode(encoded)
print(f"Decoded data: {decoded_data}")

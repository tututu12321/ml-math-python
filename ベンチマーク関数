import numpy as np
import matplotlib.pyplot as plt

# 1. Rastrigin関数
def rastrigin(x):
    A = 10
    return A * len(x) + np.sum(x**2 - A * np.cos(2 * np.pi * x))

# 2. Ackley関数
def ackley(x):
    a = 20
    b = 0.2
    c = 2 * np.pi
    n = len(x)
    sum1 = np.sum(x**2)
    sum2 = np.sum(np.cos(c * x))
    return -a * np.exp(-b * np.sqrt(sum1 / n)) - np.exp(sum2 / n) + a + np.exp(1)

# 3. Rosenbrock関数
def rosenbrock(x):
    return np.sum(100.0 * (x[1:] - x[:-1]**2.0)**2 + (1 - x[:-1])**2)

# 4. Sphere関数
def sphere(x):
    return np.sum(x**2)

# 5. Griewank関数
def griewank(x):
    sum1 = np.sum(x**2) / 4000
    prod = np.prod(np.cos(x / np.sqrt(np.arange(1, len(x) + 1))))
    return sum1 - prod + 1

# 6. Schaffer関数
def schaffer(x):
    return 0.5 + (np.sin(x[0]**2 - x[1]**2)**2 - 0.5) / (1 + 0.001 * (x[0]**2 + x[1]**2))**2

# 7. Michalewicz関数
def michalewicz(x, m=10):
    return -np.sum(np.sin(x) * np.sin((x**2) / np.pi)**(2*m))

# 8. Beale関数
def beale(x):
    return (1.5 - x[0] + x[0] * x[1])**2 + (2.25 - x[0] + x[0] * x[1]**2)**2 + (2.625 - x[0] + x[0] * x[1]**3)**2

# 9. Rosenbrock-Rastrigin関数
def rosenbrock_rastrigin(x):
    return rosenbrock(x) + rastrigin(x)

# ベンチマーク関数をリストにまとめる
benchmark_functions = {
    "Rastrigin": rastrigin,
    "Ackley": ackley,
    "Rosenbrock": rosenbrock,
    "Sphere": sphere,
    "Griewank": griewank,
    "Schaffer": schaffer,
    "Michalewicz": michalewicz,
    "Beale": beale,
    "Rosenbrock-Rastrigin": rosenbrock_rastrigin
}

# 最適化アルゴリズムをテストする関数（シンプルな勾配降下法）
def gradient_descent(func, initial_point, learning_rate=0.1, iterations=100):
    x = np.array(initial_point)
    for _ in range(iterations):
        grad = np.gradient(func(x))  # 勾配を計算
        x = x - learning_rate * grad  # 勾配降下法で更新
    return x, func(x)

# ベンチマーク関数を実行して最適化アルゴリズムの結果を表示
initial_point = [5, 5]  # 初期点を設定
results = {}

for name, func in benchmark_functions.items():
    print(f"最適化結果 - {name}")
    optimal_point, optimal_value = gradient_descent(func, initial_point)
    results[name] = (optimal_point, optimal_value)
    print(f"最適点: {optimal_point}, 最小値: {optimal_value}\n")

# グラフの描画（最適化結果の比較）
fig, ax = plt.subplots(figsize=(10, 6))
for name, (optimal_point, optimal_value) in results.items():
    ax.scatter(optimal_point[0], optimal_point[1], label=f"{name}: {optimal_value:.2f}")

ax.set_title("Optimization Results for Benchmark Functions")
ax.set_xlabel("X1")
ax.set_ylabel("X2")
ax.legend()
plt.show()

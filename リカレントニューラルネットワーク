import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, LSTM, Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing import sequence

# §8.1 リカレントニューラルネットワークとは
# RNNは時系列データを扱うニューラルネットワークの一種で、過去の情報を保持しながら予測を行います。

# データのロード（IMDBデータセット）
max_features = 10000  # トークン数
maxlen = 500  # 各文書の最大長

(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)

# データの前処理（パディング）
x_train = sequence.pad_sequences(x_train, maxlen=maxlen)
x_test = sequence.pad_sequences(x_test, maxlen=maxlen)

# RNNモデルの構築
def create_rnn_model():
    model = Sequential([
        SimpleRNN(128, input_shape=(maxlen, 1), activation='tanh', return_sequences=False),  # RNN層
        Dense(1, activation='sigmoid')  # 出力層
    ])
    model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])
    return model

rnn_model = create_rnn_model()

# §8.2 重みやバイアスの計算式
# RNNの重みとバイアスの計算式は、基本的には入力と隠れ層の状態を結びつけるためのもので、順伝播で次の出力を計算します。

# RNNの重みは、隠れ層の状態と入力の関数として計算されます。
# 重み行列W_xh (入力から隠れ層へ)、W_hh (隠れ層同士の関係)、W_hy (隠れ層から出力へ)などがあります。

# ここで、RNNの訓練は以下の計算式を使って行われます：
# h_t = activation(W_xh * x_t + W_hh * h_(t-1) + b_h)
# y_t = activation(W_hy * h_t + b_y)

# §8.3 リカレントニューラルネットワークの実践例
# 上記で構築したRNNモデルを使ってIMDBデータセットで訓練と評価を行います。

rnn_model.fit(x_train, y_train, epochs=3, batch_size=64, validation_data=(x_test, y_test))

# モデル評価
score = rnn_model.evaluate(x_test, y_test, batch_size=64)
print(f"Test Loss: {score[0]}, Test Accuracy: {score[1]}")

# §8.4 LSTM――長・短期記憶
# LSTM（Long Short-Term Memory）は、RNNの一種で、長期依存関係の問題を解決するために設計されたモデルです。

# LSTMモデルの構築
def create_lstm_model():
    model = Sequential([
        LSTM(128, input_shape=(maxlen, 1), activation='tanh', return_sequences=False),  # LSTM層
        Dense(1, activation='sigmoid')  # 出力層
    ])
    model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])
    return model

lstm_model = create_lstm_model()

# LSTMモデルの訓練
lstm_model.fit(x_train, y_train, epochs=3, batch_size=64, validation_data=(x_test, y_test))

# モデル評価
score_lstm = lstm_model.evaluate(x_test, y_test, batch_size=64)
print(f"Test Loss (LSTM): {score_lstm[0]}, Test Accuracy (LSTM): {score_lstm[1]}")

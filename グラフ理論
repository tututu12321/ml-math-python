import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

# 6.1 グラフの基本概念（隣接行列、ラプラシアン行列）
def adjacency_and_laplacian():
    """
    隣接行列とラプラシアン行列の計算 (Adjacency and Laplacian matrix computation)
    """
    A = np.array([[0, 1, 1, 0],
                  [1, 0, 1, 1],
                  [1, 1, 0, 1],
                  [0, 1, 1, 0]])
    L = np.diag(A.sum(axis=1)) - A  # ラプラシアン行列 (Laplacian matrix)
    return A, L

# 6.2 最短経路問題（Dijkstra法、Bellman-Ford法）
def shortest_path(graph, source, method='dijkstra'):
    """
    Dijkstra法またはBellman-Ford法で最短経路を求める (Find shortest path using Dijkstra or Bellman-Ford)
    graph: networkxのグラフ
    source: 開始ノード
    method: 'dijkstra' または 'bellman-ford'
    """
    if method == 'dijkstra':
        return nx.single_source_dijkstra_path_length(graph, source)
    elif method == 'bellman-ford':
        return nx.single_source_bellman_ford_path_length(graph, source)
    else:
        raise ValueError("Invalid method: choose 'dijkstra' or 'bellman-ford'")

# 6.3 ページランクとランダムウォーク
def pagerank_random_walk(graph, alpha=0.85):
    """
    PageRankアルゴリズムを実装 (Compute PageRank using random walk)
    """
    return nx.pagerank(graph, alpha=alpha)

# 6.4 ネットワーク分析とクラスタリング
def network_analysis_clustering(graph):
    """
    クラスタリング係数を計算 (Compute clustering coefficients)
    """
    return nx.clustering(graph)

# 例の実行 (Example Execution)
if __name__ == "__main__":
    # 隣接行列とラプラシアン行列
    A, L = adjacency_and_laplacian()
    print("Adjacency Matrix:\n", A)
    print("Laplacian Matrix:\n", L)

    # グラフの作成 (Create a graph)
    G = nx.Graph()
    edges = [(0, 1, 1), (0, 2, 1), (1, 2, 1), (1, 3, 1), (2, 3, 1)]
    G.add_weighted_edges_from(edges)
    
    # 最短経路 (Shortest Path)
    sp_dijkstra = shortest_path(G, source=0, method='dijkstra')
    sp_bellman = shortest_path(G, source=0, method='bellman-ford')
    print("Shortest Path (Dijkstra):", sp_dijkstra)
    print("Shortest Path (Bellman-Ford):", sp_bellman)
    
    # ページランク (PageRank)
    pr = pagerank_random_walk(G)
    print("PageRank:", pr)
    
    # クラスタリング係数 (Clustering Coefficient)
    clustering_coeff = network_analysis_clustering(G)
    print("Clustering Coefficients:", clustering_coeff)
    
    # グラフの可視化 (Graph Visualization)
    plt.figure(figsize=(6, 4))
    nx.draw(G, with_labels=True, node_color='lightblue', edge_color='gray', node_size=500)
    plt.show()

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.losses import SparseCategoricalCrossentropy
from tensorflow.keras.datasets import mnist
import matplotlib.pyplot as plt

# データのロードと前処理 / Load and preprocess the data
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0  # 正規化 / Normalize the images

# データを4次元テンソルに変換 (サンプル数, 高さ, 幅, チャンネル数) / Reshape data to include a channel dimension
x_train = x_train.reshape(-1, 28, 28, 1)
x_test = x_test.reshape(-1, 28, 28, 1)

# CNNモデルの構築 / Build a CNN model
model = Sequential([
    Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D(pool_size=(2, 2)),
    Conv2D(64, kernel_size=(3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Conv2D(128, kernel_size=(3, 3), activation='relu'),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),  # ドロップアウトによる過学習の防止 / Dropout to prevent overfitting
    Dense(10, activation='softmax')  # 出力層 / Output layer for 10 classes
])

# モデルのコンパイル / Compile the model
model.compile(
    optimizer=Adam(),
    loss=SparseCategoricalCrossentropy(),
    metrics=['accuracy']
)

# モデルのサマリー表示 / Display model summary
model.summary()

# モデルのトレーニング / Train the model
history = model.fit(
    x_train, y_train,
    epochs=10,
    batch_size=128,
    validation_data=(x_test, y_test)
)

# モデルの評価 / Evaluate the model
test_loss, test_accuracy = model.evaluate(x_test, y_test)
print(f"Test Loss: {test_loss}")
print(f"Test Accuracy: {test_accuracy * 100:.2f}%")

# 学習曲線の可視化 / Plot training accuracy and loss
plt.figure(figsize=(12, 5))

# 訓練と検証の精度をプロット / Plot training and validation accuracy
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Training and Validation Accuracy')
plt.legend()

# 訓練と検証の損失をプロット / Plot training and validation loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training and Validation Loss')
plt.legend()

plt.tight_layout()
plt.show()

# モデルの予測を可視化 / Visualize model predictions
def plot_sample_prediction(index):
    img = x_test[index].reshape(28, 28)
    prediction = model.predict(x_test[index].reshape(1, 28, 28, 1))
    predicted_label = prediction.argmax()
    actual_label = y_test[index]
    
    plt.imshow(img, cmap='gray')
    plt.title(f"Predicted: {predicted_label}, Actual: {actual_label}")
    plt.axis('off')
    plt.show()

# サンプル画像の分類結果を表示 / Show a sample prediction
plot_sample_prediction(0)

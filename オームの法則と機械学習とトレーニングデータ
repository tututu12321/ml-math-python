import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# 1. データ生成: 電流 (I) と抵抗 (R) に基づく電圧 (V) を計算
np.random.seed(42)

# 電流 (A) と抵抗 (Ω) のランダムなデータ生成
I = np.random.uniform(0, 10, 100)  # 電流 0A 〜 10A
R = np.random.uniform(1, 10, 100)  # 抵抗 1Ω 〜 10Ω

# オームの法則に基づいて電圧 (V) を計算
V = I * R  # V = I * R

# 2. データの分割
X = np.column_stack((I, R))  # 電流と抵抗を入力データとしてまとめる
y = V  # 電圧をターゲット

# トレーニングデータとテストデータに分割
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. 線形回帰モデルの作成と学習
model = LinearRegression()
model.fit(X_train, y_train)

# 4. 予測
y_pred = model.predict(X_test)

# 5. モデルの評価
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse:.4f}")

# 6. 結果のプロット
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', label='Predicted vs True')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Ideal Prediction')
plt.xlabel('True Voltage (V)')
plt.ylabel('Predicted Voltage (V)')
plt.title('True vs Predicted Voltage using Linear Regression')
plt.legend()
plt.grid(True)
plt.show()

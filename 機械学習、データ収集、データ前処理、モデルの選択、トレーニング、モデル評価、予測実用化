# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Data Collection (Simulated dataset)
# Creating a synthetic dataset for house price prediction
np.random.seed(42)
num_samples = 100
square_feet = np.random.randint(500, 4000, num_samples)
num_rooms = np.random.randint(1, 10, num_samples)
house_price = square_feet * 300 + num_rooms * 5000 + np.random.randn(num_samples) * 10000

# Convert to DataFrame
df = pd.DataFrame({'SquareFeet': square_feet, 'NumRooms': num_rooms, 'Price': house_price})

# Step 2: Data Preprocessing
# Split dataset into features (X) and target variable (y)
X = df[['SquareFeet', 'NumRooms']]
y = df['Price']

# Split into training and testing datasets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the feature values (important for some models, but not necessary for linear regression)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 3: Model Selection
# Choosing Linear Regression
model = LinearRegression()

# Step 4: Training the Model
model.fit(X_train_scaled, y_train)

# Step 5: Model Evaluation
y_pred = model.predict(X_test_scaled)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Model Performance:")
print(f"Mean Squared Error: {mse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# Step 6: Deploying the Model for Prediction
# Predicting the price for a new house
new_house = np.array([[2500, 4]])  # Example: 2500 square feet, 4 rooms
new_house_scaled = scaler.transform(new_house)  # Apply the same scaling
predicted_price = model.predict(new_house_scaled)
print(f"Predicted House Price: ${predicted_price[0]:.2f}")

# Visualizing the predicted vs actual values
plt.scatter(y_test, y_pred, alpha=0.75)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted House Prices")
plt.show()

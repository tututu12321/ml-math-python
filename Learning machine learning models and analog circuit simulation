import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# 1. アナログ回路シミュレーションデータの生成
# パラメータ設定（RCフィルタの例）
R = 1000  # 抵抗値（オーム）
C = 1e-6  # コンデンサ容量（ファラッド）
f = np.logspace(1, 5, 100)  # 周波数範囲（10 Hz - 100 kHz）

# 周波数応答の計算（RCフィルタの伝達関数: H(f) = 1 / (1 + j*2*pi*f*R*C)）
H = 1 / (1 + 1j * 2 * np.pi * f * R * C)
gain = 20 * np.log10(abs(H))  # ゲイン(dB)に変換

# 周波数応答のプロット
plt.figure(figsize=(10, 5))
plt.semilogx(f, gain)
plt.xlabel("Frequency (Hz)")
plt.ylabel("Gain (dB)")
plt.title("RC Filter Frequency Response")
plt.grid(True)
plt.show()

# 2. データセットの準備
X = f.reshape(-1, 1)  # 周波数を特徴量とする
y = gain              # ゲインをターゲットとする

# 3. 機械学習モデルの学習
# 訓練データとテストデータに分割
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# モデルの訓練
model = LinearRegression()
model.fit(X_train, y_train)

# テストデータでの予測と評価
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

# 結果のプロット
plt.figure(figsize=(10, 5))
plt.semilogx(X, y, label="True Gain")
plt.semilogx(X_test, y_pred, 'o', label="Predicted Gain", markersize=4)
plt.xlabel("Frequency (Hz)")
plt.ylabel("Gain (dB)")
plt.title("RC Filter Frequency Response Prediction")
plt.legend()
plt.grid(True)
plt.show()

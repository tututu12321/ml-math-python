import numpy as np
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt

# データセット（MNIST）をロード
(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

# データの正規化（0〜1にスケーリング）
x_train, x_test = x_train / 255.0, x_test / 255.0

# ニューラルネットワークモデルの構築
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),  # 入力層（28x28ピクセル → 1次元）
    keras.layers.Dense(128, activation='relu'),  # 隠れ層（ReLU活性化関数）
    keras.layers.Dense(10, activation='softmax') # 出力層（10クラス分類）
])

# モデルのコンパイル（最適化アルゴリズムと損失関数を指定）
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# モデルの学習
model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))

# モデルの評価
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f"Test accuracy: {test_acc:.4f}")

# サンプル画像の予測
predictions = model.predict(x_test)

# 予測結果を表示
def plot_sample(index):
    plt.imshow(x_test[index], cmap='gray')
    plt.title(f"Predicted: {np.argmax(predictions[index])}, Actual: {y_test[index]}")
    plt.axis('off')
    plt.show()

plot_sample(0)

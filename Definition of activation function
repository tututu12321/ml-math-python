import numpy as np
import matplotlib.pyplot as plt

# 活性化関数の定義
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def tanh(x):
    return np.tanh(x)

def relu(x):
    return np.maximum(0, x)

def leaky_relu(x, alpha=0.01):
    return np.where(x > 0, x, alpha * x)

def elu(x, alpha=1.0):
    return np.where(x > 0, x, alpha * (np.exp(x) - 1))

def swish(x):
    return x * sigmoid(x)

def softmax(x):
    exp_x = np.exp(x - np.max(x))
    return exp_x / exp_x.sum(axis=0, keepdims=True)

def selu(x, alpha=1.67326, scale=1.0507):
    return scale * np.where(x > 0, x, alpha * (np.exp(x) - 1))

# xの範囲を設定
x = np.linspace(-5, 5, 100)

# 各活性化関数をプロット
plt.figure(figsize=(12, 8))

plt.subplot(2, 4, 1)
plt.plot(x, sigmoid(x))
plt.title('Sigmoid')

plt.subplot(2, 4, 2)
plt.plot(x, tanh(x))
plt.title('Tanh')

plt.subplot(2, 4, 3)
plt.plot(x, relu(x))
plt.title('ReLU')

plt.subplot(2, 4, 4)
plt.plot(x, leaky_relu(x))
plt.title('Leaky ReLU')

plt.subplot(2, 4, 5)
plt.plot(x, elu(x))
plt.title('ELU')

plt.subplot(2, 4, 6)
plt.plot(x, swish(x))
plt.title('Swish')

plt.subplot(2, 4, 7)
plt.plot(x, selu(x))
plt.title('SELU')

plt.tight_layout()
plt.show()

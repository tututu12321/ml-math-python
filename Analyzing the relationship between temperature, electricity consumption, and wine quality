import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

# データの可視化のための設定
sns.set(style="whitegrid")

# サンプルデータの作成: 電力と気温の関係
np.random.seed(42)
temperature = np.random.normal(25, 5, 100)
power = 2 * temperature + np.random.normal(0, 3, 100)
temp_power_data = pd.DataFrame({'temperature': temperature, 'power': power})

# サンプルデータの作成: ワインの品質
np.random.seed(42)
features = np.random.rand(100, 5)
quality = np.random.randint(3, 9, 100)
wine_data = pd.DataFrame(features, columns=['feature1', 'feature2', 'feature3', 'feature4', 'feature5'])
wine_data['quality'] = quality

# 5.4.3 電力と気温の関係の分析
X_temp = temp_power_data[['temperature']]  # 気温のデータ
y_power = temp_power_data['power']         # 電力消費量のデータ

# データ分割
X_train, X_test, y_train, y_test = train_test_split(X_temp, y_power, test_size=0.2, random_state=42)

# モデルの訓練
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

# 予測と評価
y_pred = linear_model.predict(X_test)
print("Mean Squared Error (電力と気温の関係):", mean_squared_error(y_test, y_pred))
print("R-squared (電力と気温の関係):", r2_score(y_test, y_pred))

# 結果のプロット
plt.figure(figsize=(10, 6))
plt.scatter(X_temp, y_power, color="blue", label="Actual Data")
plt.plot(X_test, y_pred, color="red", linewidth=2, label="Predicted Line")
plt.xlabel("Temperature")
plt.ylabel("Power Consumption")
plt.title("Relationship between Temperature and Power Consumption")
plt.legend()
plt.show()

# 5.4.4 ワインの品質分析
X_wine = wine_data.drop('quality', axis=1)  # 特徴量データ
y_wine = wine_data['quality']               # ターゲット（品質）

# データ分割
X_train_wine, X_test_wine, y_train_wine, y_test_wine = train_test_split(X_wine, y_wine, test_size=0.2, random_state=42)

# ランダムフォレストモデルの訓練
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train_wine, y_train_wine)

# 予測と評価
y_pred_wine = rf_model.predict(X_test_wine)
print("Accuracy (ワイン品質分析):", accuracy_score(y_test_wine, y_pred_wine))
print("\nClassification Report (ワイン品質分析):\n", classification_report(y_test_wine, y_pred_wine))

# 混同行列のプロット
conf_matrix = confusion_matrix(y_test_wine, y_pred_wine)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=np.unique(y_wine), yticklabels=np.unique(y_wine))
plt.xlabel("Predicted Quality")
plt.ylabel("Actual Quality")
plt.title("Confusion Matrix for Wine Quality Prediction")
plt.show()

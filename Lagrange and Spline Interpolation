import numpy as np
from scipy.interpolate import lagrange, CubicSpline
import matplotlib.pyplot as plt

# サンプルデータの定義
x_data = np.array([0, 1, 2, 3, 4])
y_data = np.array([1, 2, 0, 2, 1])

# 8.1 ラグランジュ補間法
def lagrange_interpolation(x_data, y_data, x_values):
    """
    Performs Lagrange interpolation.
    :param x_data: Known x values
    :param y_data: Known y values
    :param x_values: x values for which to evaluate the interpolated polynomial
    :return: Interpolated y values at x_values
    """
    poly = lagrange(x_data, y_data)
    y_values = poly(x_values)
    return y_values

# 8.2 スプライン補間法
def spline_interpolation(x_data, y_data, x_values):
    """
    Performs cubic spline interpolation.
    :param x_data: Known x values
    :param y_data: Known y values
    :param x_values: x values for which to evaluate the spline
    :return: Interpolated y values at x_values
    """
    spline = CubicSpline(x_data, y_data)
    y_values = spline(x_values)
    return y_values

# 補間範囲の設定
x_values = np.linspace(0, 4, 100)

# 8.1 ラグランジュ補間法による補間
y_lagrange = lagrange_interpolation(x_data, y_data, x_values)

# 8.2 スプライン補間法による補間
y_spline = spline_interpolation(x_data, y_data, x_values)

# 結果のプロット
plt.figure(figsize=(10, 6))
plt.plot(x_data, y_data, 'o', label='Original Data')
plt.plot(x_values, y_lagrange, label='Lagrange Interpolation', linestyle='--')
plt.plot(x_values, y_spline, label='Spline Interpolation', linestyle='-')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Lagrange and Spline Interpolation')
plt.legend()
plt.grid()
plt.show()

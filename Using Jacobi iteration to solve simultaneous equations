import numpy as np

def jacobi_method(A, b, initial_guess=None, tol=1e-10, max_iterations=100):
    """
    Solves the linear equation Ax = b using the Jacobi iterative method.
    :param A: Coefficient matrix (2D list or numpy array)
    :param b: Constant terms (1D list or numpy array)
    :param initial_guess: Initial guess for the solution (optional)
    :param tol: Tolerance for convergence
    :param max_iterations: Maximum number of iterations
    :return: Solution vector x
    """
    # Convert inputs to numpy arrays
    A = np.array(A, dtype=float)
    b = np.array(b, dtype=float)
    n = len(b)

    # Initial guess
    if initial_guess is None:
        x = np.zeros(n)
    else:
        x = np.array(initial_guess, dtype=float)

    # Initialize variables
    x_new = np.zeros(n)

    for iteration in range(max_iterations):
        for i in range(n):
            sum_ = sum(A[i][j] * x[j] for j in range(n) if j != i)
            x_new[i] = (b[i] - sum_) / A[i][i]
        
        # Check for convergence
        if np.linalg.norm(x_new - x, ord=np.inf) < tol:
            print(f"Converged in {iteration + 1} iterations")
            return x_new
        
        x = x_new.copy()

    print("Did not converge within the maximum number of iterations")
    return x

# 3元連立1次方程式の例
A_3x3 = [
    [4, -1, 0],
    [-1, 4, -1],
    [0, -1, 4]
]
b_3x3 = [15, 10, 10]

# ヤコビ反復法による3元連立一次方程式の解
solution_3x3 = jacobi_method(A_3x3, b_3x3)
print("Solution for 3x3 system:", solution_3x3)

# ヤコビ反復法による計算
# This function performs the Jacobi iterative method for solving the linear equation Ax = b.
# It calculates approximate solutions iteratively for a system of linear equations.

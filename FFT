import numpy as np
import matplotlib.pyplot as plt

# パラメータ設定
Vdd = 0.75  # 電源電圧 [V]
Fin = 124.511e3  # 入力周波数 [Hz]
amplitude = 0.3  # 入力振幅 [V]
Fs = 1e6  # サンプリング周波数 [Hz]
num_samples = 2048  # FFT点数

# 時間軸の設定
t = np.arange(num_samples) / Fs  # サンプリング周波数に基づく時間配列

# 入力サイン波の生成
input_signal = amplitude * np.sin(2 * np.pi * Fin * t)

# ノイズの追加
noise_amplitude = 0.05  # ノイズ振幅
noisy_signal = input_signal + noise_amplitude * np.random.randn(num_samples)

# FFTの計算（ノイズなし）
fft_result_signal = np.fft.fft(input_signal)
fft_amplitude_signal = np.abs(fft_result_signal) / num_samples
fft_amplitude_signal_db = 20 * np.log10(fft_amplitude_signal)  # dBスケールに変換

# FFTの計算（ノイズあり）
fft_result_noisy = np.fft.fft(noisy_signal)
fft_amplitude_noisy = np.abs(fft_result_noisy) / num_samples
fft_amplitude_noisy_db = 20 * np.log10(fft_amplitude_noisy)  # dBスケールに変換

frequencies = np.fft.fftfreq(num_samples, d=1/Fs)

# プロット（時間領域での信号）
plt.figure(figsize=(12, 12))

# 時間領域でのノイズなしサイン波
plt.subplot(2, 2, 1)
plt.plot(t * 1e3, input_signal, color='orange')
plt.title(f"Input Sine Wave (No Noise) - Time Domain\nFin = {Fin/1e3} kHz, Amplitude = {amplitude} V")
plt.xlabel("Time [ms]")
plt.ylabel("Amplitude [V]")
plt.grid(True)

# 時間領域でのノイズありサイン波
plt.subplot(2, 2, 2)
plt.plot(t * 1e3, noisy_signal, color='blue')
plt.title(f"Input Sine Wave with Noise - Time Domain\nFin = {Fin/1e3} kHz, Amplitude = {amplitude} V")
plt.xlabel("Time [ms]")
plt.ylabel("Amplitude [V]")
plt.grid(True)

# 周波数スペクトル（ノイズなし）
plt.subplot(2, 2, 3)
plt.plot(frequencies[:num_samples // 2] / 1e3, fft_amplitude_signal_db[:num_samples // 2], color='orange')
plt.title("Power Spectrum (No Noise)")
plt.xlabel("Frequency [kHz]")
plt.ylabel("Power [dB]")
plt.grid(True)

# 周波数スペクトル（ノイズあり）
plt.subplot(2, 2, 4)
plt.plot(frequencies[:num_samples // 2] / 1e3, fft_amplitude_noisy_db[:num_samples // 2], color='blue')
plt.title("Power Spectrum with Noise")
plt.xlabel("Frequency [kHz]")
plt.ylabel("Power [dB]")
plt.grid(True)

plt.tight_layout()
plt.show()

import numpy as np
from scipy.optimize import minimize_scalar

# 目的関数の定義
def objective_function(x):
    return (x - 3)**2 + 4  # 例: 最小値は x = 3 で達成される

# 6.1.1 黄金分割法
def golden_section_method(f, a, b, tol=1e-5):
    phi = (1 + np.sqrt(5)) / 2
    resphi = 2 - phi

    c = a + resphi * (b - a)
    d = b - resphi * (b - a)
    
    while abs(b - a) > tol:
        if f(c) < f(d):
            b = d
            d = c
            c = a + resphi * (b - a)
        else:
            a = c
            c = d
            d = b - resphi * (b - a)
    
    return (b + a) / 2

# 6.1.2 勾配法 (単純な勾配降下法)
def gradient_descent(f_prime, initial_guess, learning_rate=0.1, tol=1e-5, max_iterations=1000):
    x = initial_guess
    for _ in range(max_iterations):
        grad = f_prime(x)
        x_new = x - learning_rate * grad
        if abs(x_new - x) < tol:
            break
        x = x_new
    return x

# 6.1.3 ニュートン法
def newton_method(f_prime, f_double_prime, initial_guess, tol=1e-5, max_iterations=1000):
    x = initial_guess
    for _ in range(max_iterations):
        f_prime_x = f_prime(x)
        f_double_prime_x = f_double_prime(x)
        if f_double_prime_x == 0:  # Avoid division by zero
            break
        x_new = x - f_prime_x / f_double_prime_x
        if abs(x_new - x) < tol:
            break
        x = x_new
    return x

# 他の方法: SciPyのBrent法
def brent_method(f):
    result = minimize_scalar(f, method='Brent')
    return result.x

# 目的関数の微分と2次微分の定義 (勾配法とニュートン法に必要)
def objective_function_prime(x):
    return 2 * (x - 3)

def objective_function_double_prime(x):
    return 2

# 各最適化手法の実行
# 6.1.1 黄金分割法
a, b = 0, 6  # 初期区間
golden_result = golden_section_method(objective_function, a, b)
print("Golden Section Method Result:", golden_result)

# 6.1.2 勾配法
initial_guess = 0
gradient_result = gradient_descent(objective_function_prime, initial_guess)
print("Gradient Descent Result:", gradient_result)

# 6.1.3 ニュートン法
newton_result = newton_method(objective_function_prime, objective_function_double_prime, initial_guess)
print("Newton's Method Result:", newton_result)

# 他の方法: Brent法
brent_result = brent_method(objective_function)
print("Brent Method Result:", brent_result)

import torch
import torch.nn as nn
import numpy as np

# --- 1. Sinusoidal Positional Encoding ---
class PositionalEncoding(nn.Module):
    def __init__(self, d_model, max_len=5000):
        super(PositionalEncoding, self).__init__()

        # Initialize a buffer of size (max_len, d_model) for storing positional encodings
        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * -(np.log(10000.0) / d_model))

        pe[:, 0::2] = torch.sin(position * div_term)  # Even indices (sine)
        pe[:, 1::2] = torch.cos(position * div_term)  # Odd indices (cosine)

        pe = pe.unsqueeze(0)  # Add batch dimension
        self.register_buffer('pe', pe)

    def forward(self, x):
        # Add positional encoding to the input tensor
        return x + self.pe[:, :x.size(1)]


# --- 2. Learned Positional Embedding ---
class LearnedPositionalEmbedding(nn.Module):
    def __init__(self, d_model, max_len=5000):
        super(LearnedPositionalEmbedding, self).__init__()
        self.pos_embedding = nn.Embedding(max_len, d_model)

    def forward(self, x):
        positions = torch.arange(0, x.size(1), device=x.device).unsqueeze(0)
        return x + self.pos_embedding(positions)

# --- Example Usage ---
batch_size = 2
seq_len = 5
d_model = 8  # Embedding dimension

# Random input tensor of shape (batch_size, seq_len, d_model)
x = torch.randn(batch_size, seq_len, d_model)

# --- Sinusoidal Positional Encoding ---
pos_encoder = PositionalEncoding(d_model)
encoded_x = pos_encoder(x)
print("Sinusoidal Positional Encoding Output:", encoded_x)

# --- Learned Positional Embedding ---
learned_pos_encoder = LearnedPositionalEmbedding(d_model)
encoded_x_learned = learned_pos_encoder(x)
print("Learned Positional Embedding Output:", encoded_x_learned)

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten
from tensorflow.keras.datasets import mnist
import matplotlib.pyplot as plt

# データセットの読み込み (Load the MNIST dataset)
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# データの前処理 (Preprocess the data)
X_train = X_train.reshape(-1, 28, 28, 1) / 255.0  # 0-255の画素値を0-1にスケーリング
X_test = X_test.reshape(-1, 28, 28, 1) / 255.0

# モデルの構築 (Build the CNN model)
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')  # 出力層 (Output layer) - 10クラス（0〜9の数字）
])

# モデルのコンパイル (Compile the model)
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# モデルの訓練 (Train the model)
history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5, batch_size=64)

# モデルの評価 (Evaluate the model)
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f'Test accuracy: {test_accuracy:.4f}')

# 損失と精度のプロット (Plot the loss and accuracy)
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss over Epochs')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy over Epochs')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()

# テストデータから画像を選んで予測を可視化 (Visualize predictions)
import numpy as np

def plot_image_prediction(index):
    plt.imshow(X_test[index].reshape(28, 28), cmap='gray')
    plt.title(f'True: {y_test[index]}, Predicted: {np.argmax(model.predict(X_test[index:index+1]))}')
    plt.axis('off')
    plt.show()

# 予測の可視化 (Visualize a few predictions)
for i in range(5):
    plot_image_prediction(i)

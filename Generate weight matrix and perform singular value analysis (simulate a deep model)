import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import TruncatedSVD
from sklearn.metrics import mean_squared_error

# ランダム行列の生成 / Generate a random matrix
np.random.seed(42)
A = np.random.randn(100, 50)  # 100x50のランダム行列 / 100x50 random matrix

# 特異値分解（SVD）の計算 / Compute Singular Value Decomposition (SVD)
U, S, Vt = np.linalg.svd(A, full_matrices=False)
print("Singular values (first 10):", S[:10])

# 特異値の可視化 / Visualize singular values
plt.figure(figsize=(8, 5))
plt.plot(S, 'bo-', label='Singular Values')
plt.xlabel('Index')
plt.ylabel('Singular Value')
plt.title('Singular Values of Random Matrix')
plt.grid(True)
plt.legend()
plt.show()

# 次元削減のためにTruncatedSVDを使用 / Use TruncatedSVD for dimensionality reduction
svd = TruncatedSVD(n_components=10)
A_reduced = svd.fit_transform(A)  # 次元削減された行列（100x10）/ Dimension-reduced matrix (100x10)

# 次元削減後の再構成 / Reconstruct after dimensionality reduction
A_reconstructed = svd.inverse_transform(A_reduced)

# 再構成誤差（損失関数としてのMSE）/ Reconstruction error (MSE as the loss function)
mse_loss = mean_squared_error(A, A_reconstructed)
print(f"Reconstruction MSE Loss: {mse_loss}")

# データの生成（回帰モデルの例）/ Generate data (Example of a regression model)
x = np.linspace(-1, 1, 100).reshape(-1, 1)
y = 3 * x.squeeze() + 2 + np.random.randn(100) * 0.1  # 線形データにノイズを追加 / Add noise to linear data

# 重み行列の生成と特異値解析（深層モデルを模擬）/ Generate weight matrix and perform singular value analysis (simulate a deep model)
W = np.random.randn(10, 1)
U_W, S_W, Vt_W = np.linalg.svd(W, full_matrices=False)
print("\nSingular values of weight matrix W:", S_W)

# 学習後の予測値（ここでは単純に線形変換を模擬）/ Simulate predictions after training (simple linear transformation here)
y_pred = A_reduced @ W

# 損失関数の計算（MSE）/ Calculate the loss function (MSE)
mse_pred = mean_squared_error(y, y_pred)
print(f"Prediction MSE Loss: {mse_pred}")

# 予測と実際の値の可視化 / Visualize actual vs predicted values
plt.figure(figsize=(8, 5))
plt.scatter(x, y, label='Actual', color='blue', alpha=0.5)
plt.scatter(x, y_pred, label='Predicted', color='red', alpha=0.5)
plt.xlabel('x')
plt.ylabel('y')
plt.title('Actual vs Predicted Values')
plt.legend()
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, WhiteKernel

# 乱数の固定（再現性の確保）
np.random.seed(42)

# サイン波の観測データを生成（ノイズ付き）
X_train = np.linspace(0, 2 * np.pi, 10).reshape(-1, 1)  # 入力 (10点)
y_train = np.sin(X_train).ravel() + np.random.normal(0, 0.1, X_train.shape[0])  # 観測値 (ノイズ付き)

# ガウス過程回帰モデルの定義（カーネルはRBF + ノイズ項）
kernel = RBF(length_scale=1.0) + WhiteKernel(noise_level=0.1)
gp = GaussianProcessRegressor(kernel=kernel, alpha=0.1**2, n_restarts_optimizer=10)

# モデルの学習
gp.fit(X_train, y_train)

# 予測用データ（密なグリッド）
X_test = np.linspace(0, 2 * np.pi, 100).reshape(-1, 1)
y_pred, sigma = gp.predict(X_test, return_std=True)  # 予測値と標準偏差

# グラフの描画
plt.figure(figsize=(8, 5))
plt.plot(X_test, np.sin(X_test), 'r--', label="True Function (sin(x))")  # 真の関数
plt.scatter(X_train, y_train, c='black', marker='x', label="Observations")  # 観測点
plt.plot(X_test, y_pred, 'b', label="Mean Prediction")  # 平均予測
plt.fill_between(X_test.ravel(), y_pred - 2*sigma, y_pred + 2*sigma, alpha=0.2, color="blue", label="Confidence Interval (95%)")  # 信頼区間
plt.xlabel("x")
plt.ylabel("y")
plt.legend()
plt.title("Bayesian Regression with Gaussian Process (Posterior Distribution)")
plt.show()

import numpy as np
from numpy.linalg import eig, norm, inv

# 10.1 固有値問題の解法
def eigenvalue_problem(A):
    """
    Solves the eigenvalue problem for matrix A using numpy's eig function.
    """
    eigenvalues, eigenvectors = eig(A)
    return eigenvalues, eigenvectors

# 10.2 近似固有値の誤差評価
def eigenvalue_error_estimation(A, approx_eigenvalue, approx_eigenvector):
    """
    Evaluates the error of an approximate eigenvalue and eigenvector.
    :param A: Matrix
    :param approx_eigenvalue: Approximate eigenvalue
    :param approx_eigenvector: Approximate eigenvector
    :return: Error in the eigenvalue approximation
    """
    residual = A @ approx_eigenvector - approx_eigenvalue * approx_eigenvector
    error = norm(residual)
    return error

# 10.3 累乗法
def power_method(A, max_iterations=1000, tol=1e-5):
    """
    Finds the largest eigenvalue and corresponding eigenvector using the power method.
    :param A: Matrix
    :param max_iterations: Maximum number of iterations
    :param tol: Tolerance for convergence
    :return: Largest eigenvalue and eigenvector
    """
    n = A.shape[0]
    x = np.random.rand(n)
    x = x / norm(x)  # 初期ベクトルの正規化

    for _ in range(max_iterations):
        x_new = A @ x
        x_new = x_new / norm(x_new)
        eigenvalue = np.dot(x_new.T, A @ x_new)  # レイリー商

        if norm(x_new - x) < tol:
            break
        x = x_new

    return eigenvalue, x

# 10.4 逆反復法
def inverse_iteration_method(A, shift, max_iterations=1000, tol=1e-5):
    """
    Finds an eigenvalue close to the shift and the corresponding eigenvector using inverse iteration.
    :param A: Matrix
    :param shift: Shift value to target a specific eigenvalue
    :param max_iterations: Maximum number of iterations
    :param tol: Tolerance for convergence
    :return: Eigenvalue close to shift and corresponding eigenvector
    """
    n = A.shape[0]
    x = np.random.rand(n)
    x = x / norm(x)
    I = np.eye(n)
    shifted_A = A - shift * I

    for _ in range(max_iterations):
        x_new = np.linalg.solve(shifted_A, x)
        x_new = x_new / norm(x_new)
        
        if norm(x_new - x) < tol:
            break
        x = x_new

    eigenvalue = np.dot(x.T, A @ x) / np.dot(x.T, x)  # レイリー商による近似固有値
    return eigenvalue, x

# サンプル行列の生成
A = np.array([[4, 1], [2, 3]])

# 10.1 固有値問題の解法
eigenvalues, eigenvectors = eigenvalue_problem(A)
print("Eigenvalues:", eigenvalues)
print("Eigenvectors:\n", eigenvectors)

# 10.2 近似固有値の誤差評価
approx_eigenvalue, approx_eigenvector = eigenvalues[0], eigenvectors[:, 0]
error = eigenvalue_error_estimation(A, approx_eigenvalue, approx_eigenvector)
print("Error in approximate eigenvalue:", error)

# 10.3 累乗法
largest_eigenvalue, largest_eigenvector = power_method(A)
print("Largest Eigenvalue (Power Method):", largest_eigenvalue)
print("Corresponding Eigenvector (Power Method):", largest_eigenvector)

# 10.4 逆反復法
shift = 2.5  # シフト値を設定
inverse_eigenvalue, inverse_eigenvector = inverse_iteration_method(A, shift)
print("Eigenvalue (Inverse Iteration Method):", inverse_eigenvalue)
print("Corresponding Eigenvector (Inverse Iteration Method):", inverse_eigenvector)

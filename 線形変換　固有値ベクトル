import numpy as np
import matplotlib.pyplot as plt

# Function to create a point on the unit circle
def create_unit_circle_point(angle):
    x = np.cos(angle)
    y = np.sin(angle)
    return np.array([x, y])

# Linear transformation matrix (different scaling for x and y axis)
def linear_transformation_matrix(eigenvalue_x, eigenvalue_y):
    return np.array([[eigenvalue_x, 0], [0, eigenvalue_y]])

# Eigenvalue vectors for x and y directions
eigenvalue_x = 2  # Stretching along the x-axis
eigenvalue_y = 1  # Stretching along the y-axis

# Generate points on the unit circle (angles from 0 to 2*pi)
angles = np.linspace(0, 2 * np.pi, 100)

# Create unit circle points
circle_points = np.array([create_unit_circle_point(angle) for angle in angles])

# Apply linear transformation using the eigenvalue matrix
transformed_points = np.array([linear_transformation_matrix(eigenvalue_x, eigenvalue_y).dot(point) for point in circle_points])

# Plotting the results
plt.figure(figsize=(8, 8))

# Plot the original unit circle (before transformation)
plt.plot(circle_points[:, 0], circle_points[:, 1], label='Unit Circle', color='b', linestyle='--')

# Plot the transformed ellipse (after applying the eigenvalue transformation)
plt.plot(transformed_points[:, 0], transformed_points[:, 1], label=f'Transformed Ellipse', color='r')

# Add labels and title
plt.xlabel('X')
plt.ylabel('Y')
plt.title(f'Linear Transformation to Ellipse')

# Add a legend
plt.legend()

# Set equal scaling for the x and y axes
plt.axis('equal')

# Show the plot
plt.grid(True)
plt.show()

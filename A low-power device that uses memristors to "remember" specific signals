import numpy as np
import matplotlib.pyplot as plt

# 1. メモリスターのパラメータ設定とシミュレーション
class Memristor:
    def __init__(self, initial_resistance=1000, resistance_range=(100, 10000), learning_rate=0.1):
        self.resistance = initial_resistance  # 初期抵抗値
        self.min_resistance, self.max_resistance = resistance_range  # 抵抗の範囲
        self.learning_rate = learning_rate  # 学習率

    def update_resistance(self, voltage):
        """電圧入力に基づき抵抗値を変化させる"""
        delta_resistance = self.learning_rate * voltage  # 電圧に応じた抵抗の変化
        self.resistance += delta_resistance
        self.resistance = np.clip(self.resistance, self.min_resistance, self.max_resistance)

    def conductance(self):
        """コンダクタンス（1/抵抗）を計算"""
        return 1 / self.resistance

# 2. メモリスターを使った簡単な信号の学習・記憶シミュレーション
def simulate_memristor_learning(target_signal, learning_rate=0.05, steps=100):
    memristor = Memristor(learning_rate=learning_rate)
    history = {'resistance': [], 'conductance': [], 'error': []}

    for step in range(steps):
        # 信号とメモリスターの出力誤差計算
        memristor_output = memristor.conductance()  # 出力としてコンダクタンスを使用
        error = target_signal - memristor_output  # 目標信号との誤差

        # 抵抗値を更新
        memristor.update_resistance(error)

        # 履歴の保存
        history['resistance'].append(memristor.resistance)
        history['conductance'].append(memristor.conductance())
        history['error'].append(error)

    return history

# 3. 目標信号の設定とシミュレーション実行
target_signal = 0.002  # 目標とするコンダクタンス（例: 0.002 S）
history = simulate_memristor_learning(target_signal, learning_rate=0.05, steps=100)

# 4. 結果のプロット
plt.figure(figsize=(12, 6))

# 抵抗の変化
plt.subplot(1, 3, 1)
plt.plot(history['resistance'])
plt.xlabel("Steps")
plt.ylabel("Resistance (Ohms)")
plt.title("Memristor Resistance Over Time")

# コンダクタンス（学習結果）の変化
plt.subplot(1, 3, 2)
plt.plot(history['conductance'])
plt.xlabel("Steps")
plt.ylabel("Conductance (S)")
plt.title("Memristor Conductance Over Time")

# 誤差の変化
plt.subplot(1, 3, 3)
plt.plot(history['error'])
plt.xlabel("Steps")
plt.ylabel("Error")
plt.title("Error Over Time")

plt.tight_layout()
plt.show()

import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import matplotlib.pyplot as plt
from torchvision import datasets, transforms
from torch.utils.data import DataLoader

# デバイスの設定 (Setting device)
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# データの前処理 (Data Preprocessing)
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])

# MNISTデータセットのロード (Load MNIST dataset)
train_data = datasets.MNIST(root='./data', train=True, transform=transform, download=True)
train_loader = DataLoader(train_data, batch_size=64, shuffle=True)

# Generatorの定義 (Define Generator)
class Generator(nn.Module):
    def __init__(self):
        super(Generator, self).__init__()
        self.fc = nn.Sequential(
            nn.Linear(100, 256),
            nn.ReLU(),
            nn.Linear(256, 512),
            nn.ReLU(),
            nn.Linear(512, 784),
            nn.Tanh()
        )

    def forward(self, z):
        img = self.fc(z)
        img = img.view(img.size(0), 1, 28, 28)
        return img

# Discriminatorの定義 (Define Discriminator)
class Discriminator(nn.Module):
    def __init__(self):
        super(Discriminator, self).__init__()
        self.fc = nn.Sequential(
            nn.Linear(784, 512),
            nn.LeakyReLU(0.2),
            nn.Linear(512, 256),
            nn.LeakyReLU(0.2),
            nn.Linear(256, 1),
            nn.Sigmoid()
        )

    def forward(self, img):
        img_flat = img.view(img.size(0), -1)
        validity = self.fc(img_flat)
        return validity

# モデルの初期化 (Initialize models)
generator = Generator().to(device)
discriminator = Discriminator().to(device)

# 損失関数とオプティマイザの定義 (Loss and optimizers)
criterion = nn.BCELoss()
optimizer_G = optim.Adam(generator.parameters(), lr=0.0002)
optimizer_D = optim.Adam(discriminator.parameters(), lr=0.0002)

# GANの訓練 (Train GAN)
n_epochs = 50
for epoch in range(n_epochs):
    for i, (imgs, _) in enumerate(train_loader):
        imgs = imgs.to(device)
        batch_size = imgs.size(0)

        # 正解ラベルの作成 (Create labels)
        real_labels = torch.ones(batch_size, 1).to(device)
        fake_labels = torch.zeros(batch_size, 1).to(device)

        # 1. Discriminatorの訓練 (Train Discriminator)
        optimizer_D.zero_grad()
        outputs = discriminator(imgs)
        d_loss_real = criterion(outputs, real_labels)
        d_loss_real.backward()

        z = torch.randn(batch_size, 100).to(device)
        fake_imgs = generator(z)
        outputs = discriminator(fake_imgs.detach())
        d_loss_fake = criterion(outputs, fake_labels)
        d_loss_fake.backward()

        optimizer_D.step()
        d_loss = d_loss_real + d_loss_fake

        # 2. Generatorの訓練 (Train Generator)
        optimizer_G.zero_grad()
        outputs = discriminator(fake_imgs)
        g_loss = criterion(outputs, real_labels)
        g_loss.backward()
        optimizer_G.step()

    print(f'Epoch [{epoch+1}/{n_epochs}] | D Loss: {d_loss.item():.4f} | G Loss: {g_loss.item():.4f}')

# 異常スコアの計算 (Anomaly Score Calculation)
def anomaly_score(x, generator, n_iter=500, lr=0.1):
    z = torch.randn(1, 100).to(device).requires_grad_(True)
    optimizer_z = optim.Adam([z], lr=lr)

    for _ in range(n_iter):
        optimizer_z.zero_grad()
        generated_img = generator(z)
        loss = torch.mean((generated_img - x) ** 2)
        loss.backward()
        optimizer_z.step()

    generated_img = generator(z).detach()
    score = torch.mean((generated_img - x) ** 2).item()
    return score, generated_img

# 異常検知のテスト (Test Anomaly Detection)
test_data = datasets.MNIST(root='./data', train=False, transform=transform, download=True)
test_loader = DataLoader(test_data, batch_size=1, shuffle=True)

# 正常データと異常データの例をプロット (Plotting normal and anomalous examples)
normal_image, _ = next(iter(test_loader))
normal_image = normal_image.to(device)
anomaly_score_normal, reconstructed_normal = anomaly_score(normal_image, generator)

# 異常画像を生成 (Generate an anomalous image by modifying normal)
anomalous_image = normal_image + torch.randn_like(normal_image) * 0.5
anomaly_score_anomalous, reconstructed_anomalous = anomaly_score(anomalous_image, generator)

# プロット (Plotting results)
plt.figure(figsize=(10, 5))

# Original and reconstructed normal image
plt.subplot(2, 3, 1)
plt.title('Original Normal Image')
plt.imshow(normal_image.cpu().squeeze().numpy(), cmap='gray')
plt.subplot(2, 3, 2)
plt.title('Reconstructed Normal Image')
plt.imshow(reconstructed_normal.cpu().squeeze().numpy(), cmap='gray')
plt.subplot(2, 3, 3)
plt.title(f'Anomaly Score: {anomaly_score_normal:.4f}')
plt.bar(['Normal'], [anomaly_score_normal], color='blue')

# Original and reconstructed anomalous image
plt.subplot(2, 3, 4)
plt.title('Original Anomalous Image')
plt.imshow(anomalous_image.cpu().squeeze().numpy(), cmap='gray')
plt.subplot(2, 3, 5)
plt.title('Reconstructed Anomalous Image')
plt.imshow(reconstructed_anomalous.cpu().squeeze().numpy(), cmap='gray')
plt.subplot(2, 3, 6)
plt.title(f'Anomaly Score: {anomaly_score_anomalous:.4f}')
plt.bar(['Anomalous'], [anomaly_score_anomalous], color='red')

plt.tight_layout()
plt.show()

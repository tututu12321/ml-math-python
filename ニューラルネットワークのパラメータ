import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_moons
from sklearn.model_selection import train_test_split

# 活性化関数（シグモイド関数とその微分）
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# データセットを作成
X, y = make_moons(n_samples=500, noise=0.2, random_state=42)
y = y.reshape(-1, 1)  # 出力を2Dに変形

# 訓練データとテストデータに分割
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ニューラルネットワークのパラメータ
input_size = X.shape[1]  # 2
hidden_size = 5  # 隠れ層のニューロン数
output_size = 1  # 2クラス分類

# 重みをランダムに初期化
np.random.seed(42)
W1 = np.random.randn(input_size, hidden_size)
b1 = np.zeros((1, hidden_size))
W2 = np.random.randn(hidden_size, output_size)
b2 = np.zeros((1, output_size))

# 学習率とエポック数
learning_rate = 0.1
epochs = 10000

# 学習ループ
for epoch in range(epochs):
    # 順伝播
    Z1 = np.dot(X_train, W1) + b1
    A1 = sigmoid(Z1)
    Z2 = np.dot(A1, W2) + b2
    A2 = sigmoid(Z2)  # 出力層

    # 損失の計算（二乗誤差）
    loss = np.mean((y_train - A2) ** 2)

    # 逆伝播
    dA2 = (A2 - y_train) * sigmoid_derivative(A2)  # 出力層の誤差
    dW2 = np.dot(A1.T, dA2)
    db2 = np.sum(dA2, axis=0, keepdims=True)

    dA1 = np.dot(dA2, W2.T) * sigmoid_derivative(A1)  # 隠れ層の誤差
    dW1 = np.dot(X_train.T, dA1)
    db1 = np.sum(dA1, axis=0, keepdims=True)

    # 重みの更新
    W1 -= learning_rate * dW1
    b1 -= learning_rate * db1
    W2 -= learning_rate * dW2
    b2 -= learning_rate * db2

    # 1000エポックごとに損失を表示
    if epoch % 1000 == 0:
        print(f"Epoch {epoch}, Loss: {loss:.4f}")

# 学習後の予測
Z1_test = np.dot(X_test, W1) + b1
A1_test = sigmoid(Z1_test)
Z2_test = np.dot(A1_test, W2) + b2
A2_test = sigmoid(Z2_test)

# クラス分類（しきい値0.5）
y_pred = (A2_test > 0.5).astype(int)

# 精度計算
accuracy = np.mean(y_pred == y_test)
print(f"Test Accuracy: {accuracy:.2f}")

# 決定境界のプロット
xx, yy = np.meshgrid(np.linspace(X[:,0].min(), X[:,0].max(), 100),
                     np.linspace(X[:,1].min(), X[:,1].max(), 100))
grid_points = np.c_[xx.ravel(), yy.ravel()]
Z1_grid = np.dot(grid_points, W1) + b1
A1_grid = sigmoid(Z1_grid)
Z2_grid = np.dot(A1_grid, W2) + b2
A2_grid = sigmoid(Z2_grid)
Z_grid = (A2_grid > 0.5).astype(int).reshape(xx.shape)

plt.contourf(xx, yy, Z_grid, alpha=0.3)
plt.scatter(X_test[:,0], X_test[:,1], c=y_test.ravel(), edgecolors='k')
plt.title("Neural Network Decision Boundary")
plt.show()

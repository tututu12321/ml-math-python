import cv2
import numpy as np
import matplotlib.pyplot as plt

# ダミー画像を生成（ランダムなグレースケール画像）
dummy_image = np.random.randint(0, 256, (256, 256, 3), dtype=np.uint8)

# 4. 色空間と変換
# 4.1 RGBとHSVの関係
hsv_image = cv2.cvtColor(dummy_image, cv2.COLOR_BGR2HSV)

# 4.2 グレースケール変換
gray_image = cv2.cvtColor(dummy_image, cv2.COLOR_BGR2GRAY)

# 4.3 二値化処理 (大津の方法)
_, binary_image = cv2.threshold(gray_image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

# 4.4 色空間変換 (YUV, Lab)
yuv_image = cv2.cvtColor(dummy_image, cv2.COLOR_BGR2YUV)
lab_image = cv2.cvtColor(dummy_image, cv2.COLOR_BGR2Lab)

# 色空間と変換のプロット
plt.figure(figsize=(12, 8))
plt.subplot(2, 2, 1)
plt.imshow(cv2.cvtColor(dummy_image, cv2.COLOR_BGR2RGB))
plt.title("RGB Image")
plt.subplot(2, 2, 2)
plt.imshow(hsv_image, cmap="hsv")
plt.title("HSV Image")
plt.subplot(2, 2, 3)
plt.imshow(binary_image, cmap="gray")
plt.title("Binary Image (Otsu's Threshold)")
plt.subplot(2, 2, 4)
plt.imshow(lab_image[:, :, 0], cmap="gray")
plt.title("Lab (L Component)")
plt.show()

# 5. 画像特徴の抽出
# 5.1 形状特徴量 (輪郭抽出)
contours, _ = cv2.findContours(binary_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
contour_image = dummy_image.copy()
cv2.drawContours(contour_image, contours, -1, (0, 255, 0), 2)

# 5.2 テクスチャ解析 (エネルギー, コントラスト)
glcm = cv2.calcHist([gray_image], [0], None, [256], [0, 256])
energy = np.sum(glcm ** 2)
contrast = np.sum([i**2 * glcm[i] for i in range(len(glcm))])

# 5.3 画像のHOG特徴量
hog = cv2.HOGDescriptor()
hog_features = hog.compute(gray_image)

# 5.4 カラー特徴量の抽出 (平均RGB)
mean_color = cv2.mean(dummy_image)

# 特徴抽出の結果を表示
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.imshow(cv2.cvtColor(contour_image, cv2.COLOR_BGR2RGB))
plt.title("Contours")
plt.subplot(1, 2, 2)
plt.plot(hog_features[:100])
plt.title("HOG Features (First 100)")
plt.show()

print(f"Texture Analysis - Energy: {energy}, Contrast: {contrast}")
print(f"Mean Color (BGR): {mean_color}")

# 6. 画像圧縮
# 6.1 圧縮の基本概念
# 圧縮をシミュレートするため、JPEGとPNGを保存して比較
cv2.imwrite("compressed_image.jpg", dummy_image, [cv2.IMWRITE_JPEG_QUALITY, 50])
cv2.imwrite("compressed_image.png", dummy_image)

# 圧縮後のサイズを確認
import os
jpeg_size = os.path.getsize("compressed_image.jpg")
png_size = os.path.getsize("compressed_image.png")
print(f"JPEG Size: {jpeg_size} bytes, PNG Size: {png_size} bytes")

# 7. 高度な画像処理
# 7.1 画像のセグメンテーション (K-Means)
data = dummy_image.reshape((-1, 3))
data = np.float32(data)
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
_, labels, centers = cv2.kmeans(data, 4, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)
segmented_image = centers[labels.flatten()].reshape(dummy_image.shape).astype(np.uint8)

# 7.4 画像の強調 (ヒストグラム均一化)
equalized_image = cv2.equalizeHist(gray_image)

# 高度な処理結果をプロット
plt.figure(figsize=(12, 8))
plt.subplot(1, 2, 1)
plt.imshow(cv2.cvtColor(segmented_image, cv2.COLOR_BGR2RGB))
plt.title("Segmented Image")
plt.subplot(1, 2, 2)
plt.imshow(equalized_image, cmap="gray")
plt.title("Histogram Equalized Image")
plt.show()

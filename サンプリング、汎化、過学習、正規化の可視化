import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import make_pipeline
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import Ridge

# 二次関数のサンプリング
np.random.seed(42)

# 入力データ（-3から3の範囲でサンプリング）
X = np.linspace(-3, 3, 100).reshape(-1, 1)
y = X**2 + np.random.normal(0, 0.1, size=X.shape)  # ノイズを加えた二次関数

# 訓練データとテストデータに分割
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 1. **汎化（Generalization）**: 線形回帰モデルの学習
lin_reg = make_pipeline(PolynomialFeatures(degree=2), LinearRegression())
lin_reg.fit(X_train, y_train)
y_pred_lin = lin_reg.predict(X_test)

# 2. **過学習（Overfitting）**: 高次の多項式回帰
poly_reg = make_pipeline(PolynomialFeatures(degree=15), LinearRegression())
poly_reg.fit(X_train, y_train)
y_pred_poly = poly_reg.predict(X_test)

# 3. **正規化（Regularization）**: リッジ回帰を使って正則化
ridge_reg = make_pipeline(PolynomialFeatures(degree=15), Ridge(alpha=1.0))
ridge_reg.fit(X_train, y_train)
y_pred_ridge = ridge_reg.predict(X_test)

# 損失（MSE）を計算
mse_lin = mean_squared_error(y_test, y_pred_lin)
mse_poly = mean_squared_error(y_test, y_pred_poly)
mse_ridge = mean_squared_error(y_test, y_pred_ridge)

# 可視化
plt.figure(figsize=(14, 8))

# 元のデータと訓練データ
plt.scatter(X_train, y_train, color='blue', label='Training data', alpha=0.6)
plt.scatter(X_test, y_test, color='red', label='Test data', alpha=0.6)

# 汎化（線形回帰の予測）
X_range = np.linspace(-3, 3, 100).reshape(-1, 1)
y_range_lin = lin_reg.predict(X_range)
plt.plot(X_range, y_range_lin, label=f'Linear Regression (MSE: {mse_lin:.2f})', color='green', linewidth=2)

# 過学習（高次多項式回帰）
y_range_poly = poly_reg.predict(X_range)
plt.plot(X_range, y_range_poly, label=f'Polynomial Regression (MSE: {mse_poly:.2f})', color='orange', linewidth=2)

# 正規化（リッジ回帰）
y_range_ridge = ridge_reg.predict(X_range)
plt.plot(X_range, y_range_ridge, label=f'Ridge Regression (MSE: {mse_ridge:.2f})', color='purple', linewidth=2)

# グラフの設定
plt.title('Generalization, Overfitting, and Regularization')
plt.xlabel('X')
plt.ylabel('y')
plt.legend()
plt.grid(True)
plt.show()

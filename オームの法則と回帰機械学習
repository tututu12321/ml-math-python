import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPRegressor  # 追加
from sklearn.metrics import mean_squared_error, r2_score  # 評価指標のインポート
import xgboost as xgb
import lightgbm as lgb
from catboost import CatBoostRegressor

# 1. データ生成: 電流 (I) と抵抗 (R) に基づく電圧 (V) を計算
np.random.seed(42)

# 電流 (A) と抵抗 (Ω) のランダムなデータ生成
I = np.random.uniform(0, 10, 100)  # 電流 0A 〜 10A
R = np.random.uniform(1, 10, 100)  # 抵抗 1Ω 〜 10Ω

# オームの法則に基づいて電圧 (V) を計算
V = I * R  # V = I * R

# 2. データの分割
X = np.column_stack((I, R))  # 電流と抵抗を入力データとしてまとめる
y = V  # 電圧をターゲット

# トレーニングデータとテストデータに分割
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. データの標準化
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# モデルの作成
models = {
    'Linear Regression': LinearRegression(),
    'Decision Tree': DecisionTreeRegressor(random_state=42),
    'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42),
    'SVR': SVR(),
    'Neural Network': MLPRegressor(hidden_layer_sizes=(64,), max_iter=500, random_state=42),
    'KNN': KNeighborsRegressor(n_neighbors=5),
    'Gradient Boosting': GradientBoostingRegressor(n_estimators=100, random_state=42),
    'XGBoost': xgb.XGBRegressor(n_estimators=100, random_state=42),
    'LightGBM': lgb.LGBMRegressor(n_estimators=100, random_state=42),
    'CatBoost': CatBoostRegressor(n_estimators=100, random_state=42, silent=True)
}

# モデルを学習し、予測を行う
predictions = {}
mse_scores = {}
r2_scores = {}

for name, model in models.items():
    model.fit(X_train_scaled, y_train)  # 学習
    y_pred = model.predict(X_test_scaled)  # 予測
    predictions[name] = y_pred
    mse_scores[name] = mean_squared_error(y_test, y_pred)  # MSEの計算
    r2_scores[name] = r2_score(y_test, y_pred)  # R2スコアの計算

# 4. 結果のプロット
plt.figure(figsize=(14, 8))
for i, (name, y_pred) in enumerate(predictions.items(), 1):
    plt.subplot(3, 4, i)
    plt.scatter(y_test, y_pred, color='blue', label='Predicted vs True')
    plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Ideal Prediction')
    plt.title(name)
    plt.xlabel('True Voltage (V)')
    plt.ylabel('Predicted Voltage (V)')
    plt.legend()
    plt.grid(True)

plt.tight_layout()
plt.show()

# 5. モデルの評価結果
print("モデル評価結果:")
for name in models.keys():
    print(f"{name} - MSE: {mse_scores[name]:.4f}, R²: {r2_scores[name]:.4f}")

import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split

# --- 1. Generate Sample Data ---
# Create random data for a binary classification task
X = np.random.randn(1000, 20)  # 1000 samples, 20 features
y = (np.sum(X, axis=1) > 0).astype(int)  # Binary labels based on the sum of features

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# --- 2. PyTorch Model ---
class SimpleNN_PyTorch(nn.Module):
    def __init__(self):
        super(SimpleNN_PyTorch, self).__init__()
        self.fc1 = nn.Linear(20, 64)  # 20 input features, 64 hidden units
        self.fc2 = nn.Linear(64, 1)  # Output is a single value (binary classification)
        self.sigmoid = nn.Sigmoid()
    
    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)
        return self.sigmoid(x)

# Initialize the PyTorch model
model_pytorch = SimpleNN_PyTorch()

# Convert data to PyTorch tensors
X_train_torch = torch.tensor(X_train, dtype=torch.float32)
y_train_torch = torch.tensor(y_train, dtype=torch.float32).view(-1, 1)
X_test_torch = torch.tensor(X_test, dtype=torch.float32)
y_test_torch = torch.tensor(y_test, dtype=torch.float32).view(-1, 1)

# Loss and optimizer
criterion = nn.BCELoss()
optimizer = optim.Adam(model_pytorch.parameters(), lr=0.001)

# Training loop for PyTorch
num_epochs = 10
for epoch in range(num_epochs):
    model_pytorch.train()
    optimizer.zero_grad()
    y_pred = model_pytorch(X_train_torch)
    loss = criterion(y_pred, y_train_torch)
    loss.backward()
    optimizer.step()
    
    if (epoch + 1) % 2 == 0:
        print(f"Epoch {epoch+1}/{num_epochs}, Loss: {loss.item()}")

# --- 3. TensorFlow Model ---
model_tf = tf.keras.Sequential([
    layers.Dense(64, activation='relu', input_dim=20),
    layers.Dense(1, activation='sigmoid')
])

# Compile the TensorFlow model
model_tf.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Training TensorFlow model
model_tf.fit(X_train, y_train, epochs=10, batch_size=32, verbose=2)

# --- 4. Keras Model ---
model_keras = keras.Sequential([
    layers.Dense(64, activation='relu', input_dim=20),
    layers.Dense(1, activation='sigmoid')
])

# Compile the Keras model
model_keras.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Training Keras model
model_keras.fit(X_train, y_train, epochs=10, batch_size=32, verbose=2)

# --- 5. Evaluation ---
# Evaluate the models (PyTorch, TensorFlow, and Keras)
model_pytorch.eval()
with torch.no_grad():
    y_pred_pytorch = model_pytorch(X_test_torch)
    y_pred_pytorch = (y_pred_pytorch > 0.5).float()
    accuracy_pytorch = (y_pred_pytorch == y_test_torch).float().mean()

y_pred_tf = model_tf.predict(X_test)
accuracy_tf = np.mean((y_pred_tf > 0.5) == y_test)

y_pred_keras = model_keras.predict(X_test)
accuracy_keras = np.mean((y_pred_keras > 0.5) == y_test)

print(f"PyTorch Accuracy: {accuracy_pytorch.item()}")
print(f"TensorFlow Accuracy: {accuracy_tf}")
print(f"Keras Accuracy: {accuracy_keras}")


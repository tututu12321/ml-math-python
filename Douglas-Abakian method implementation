import numpy as np

# 射影関数の定義 (例として、凸領域 A と B への射影)
def projection_A(x):
    """
    Projection onto convex set A (example: constraint x >= 0).
    """
    return np.maximum(x, 0)

def projection_B(x):
    """
    Projection onto convex set B (example: constraint x <= 1).
    """
    return np.minimum(x, 1)

# ダグラス・アバキアン法の実装
def douglas_rachford_method(proj_A, proj_B, initial_x, tol=1e-5, max_iterations=1000):
    """
    Solves optimization problem using the Douglas-Rachford splitting method.
    :param proj_A: Projection function onto set A
    :param proj_B: Projection function onto set B
    :param initial_x: Initial guess
    :param tol: Tolerance for convergence
    :param max_iterations: Maximum number of iterations
    :return: Solution vector
    """
    x = initial_x
    for iteration in range(max_iterations):
        # Douglas-Rachford iteration
        x_A = proj_A(x)
        x_B = proj_B(2 * x_A - x)
        x_new = x + (x_B - x_A)
        
        # 収束条件
        if np.linalg.norm(x_new - x) < tol:
            print(f"Converged in {iteration + 1} iterations.")
            return x_new
        x = x_new

    print("Did not converge within the maximum number of iterations.")
    return x

# 初期点とテスト用のパラメータ設定
initial_x = np.array([1.5, -0.5, 0.5])  # 初期推定値

# ダグラス・アバキアン法を実行
solution = douglas_rachford_method(projection_A, projection_B, initial_x)
print("Solution using Douglas-Rachford method:", solution)

import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, filtfilt

# 🔹 パラメータ設定
fs = 44100  # サンプリングレート（Hz）
T = 0.02  # 信号の長さ（秒）
t = np.linspace(0, T, int(fs * T), endpoint=False)  # 時間軸

# 🔹 ギター入力信号（基本波 + 高調波 + ノイズ）
freq = 440  # A4（ラ）の音（Hz）
input_signal = np.sin(2 * np.pi * freq * t) + 0.2 * np.sin(2 * np.pi * 2 * freq * t)  # 基本波 + 第2高調波
input_signal += 0.05 * np.random.randn(len(t))  # ノイズ追加

# 🔹 エレキギターアンプの増幅（非線形）
gain = 5.0  # 増幅率
amplified_signal = gain * input_signal

# 🔹 クリッピング（アンプの歪み効果）
clip_level = 1.0  # クリッピング閾値（-1.0 ～ 1.0 に制限）
clipped_signal = np.clip(amplified_signal, -clip_level, clip_level)

# 🔹 ローパスフィルタ（スピーカーの周波数応答をシミュレーション）
def lowpass_filter(signal, cutoff=5000, fs=fs, order=4):
    nyq = 0.5 * fs
    normal_cutoff = cutoff / nyq
    b, a = butter(order, normal_cutoff, btype='low', analog=False)
    return filtfilt(b, a, signal)

filtered_signal = lowpass_filter(clipped_signal)

# 🔹 波形の可視化
plt.figure(figsize=(12, 6))

plt.subplot(3, 1, 1)
plt.plot(t, input_signal, label="Input Guitar Signal", color='b')
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.title("Input Guitar Signal (Clean)")
plt.grid()
plt.legend()

plt.subplot(3, 1, 2)
plt.plot(t, clipped_signal, label="Amplified & Clipped Signal", color='r')
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.title("Amplified Guitar Signal with Clipping")
plt.grid()
plt.legend()

plt.subplot(3, 1, 3)
plt.plot(t, filtered_signal, label="Final Output (Low-Pass Filtered)", color='g')
plt.xlabel("Time (s)")
plt.ylabel("Amplitude")
plt.title("Final Guitar Output (Filtered for Speaker)")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
